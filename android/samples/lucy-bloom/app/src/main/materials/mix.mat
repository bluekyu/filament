material {
    name : mix,
    shadingModel : unlit,
    depthWrite: false,
    depthCulling: false,
    parameters : [
        {
            type : sampler2d,
            name : color
        },
        {
            type : sampler2d,
            name : secondary
        }
    ],
    requires: [
        uv0
    ]
}

fragment {

    vec3 Tonemap_ReinhardWeighted(const vec3 x, float weight) {
        // Weighted Reinhard tone-mapping operator designed for post-processing
        // This tone-mapping operator is invertible
        return x * (weight / (max3(x) + 1.0));
    }

    vec3 Tonemap_ReinhardWeighted_Invert(const vec3 x) {
        // Inverse Reinhard tone-mapping operator, designed to be used in conjunction
        // with the weighted Reinhard tone-mapping operator
        return x / (1.0 - max3(x));
    }

    void material(inout MaterialInputs material) {
        prepareMaterial(material);
        vec3 primary = texture(materialParams_color, getUV0()).rgb;
        primary = Tonemap_ReinhardWeighted(primary, 1.0);
        vec3 blurred = texture(materialParams_secondary, getUV0()).rgb;

        // HACK: this is a crude bloom effect
        float brightness = max(blurred.r, max(blurred.g, blurred.b));
        float L = smoothstep(0.4, 0.5, brightness);

        material.baseColor.rgb = Tonemap_ReinhardWeighted_Invert(mix(primary, blurred, L));
    }
}
